package chainid

import (
	"strings"
)

const SuiIdentifierLength = 4

// NewSuiMainnetChainId returns the ChainId for the Sui mainnet blockchain
func NewSuiMainnetChainId() ChainId {
	return ChainId{
		inner: []byte{0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x35, 0x83, 0x4a, 0x8a},
	}
}

// NewSuiTestnetChainId returns the ChainId for the Sui testnet blockchain
func NewSuiTestnetChainId() ChainId {
	return ChainId{
		inner: []byte{0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4c, 0x78, 0xad, 0xac},
	}
}

// NewSuiChainId returns a ChainId instance given the 4 bytes identifier, hex encoded,which determines the chain
// Hex is accepted both with and without leading 0x
func NewSuiChainId(identifier string) (*ChainId, error) {
	trimmed := strings.TrimPrefix(identifier, "0x")
	if len(trimmed) != SuiIdentifierLength*2 {
		return nil, NewErrLenght(SuiIdentifierLength, len(trimmed))
	}
	return NewChainIdFromHex(EcosystemSui.ToEcosystemHexByte() + repeated64Zeros[SuiIdentifierLength*2+2:] + trimmed)
}
