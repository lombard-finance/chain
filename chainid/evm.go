package chainid

import "strings"

// NewEVMChainId returns a new ChainId instance for the provided chain Id.
// Chain Id must be provided in hex form eith either with or w/o the leading 0x
func NewEVMChainId(chainId string) (*ChainId, error) {
	trimmed := strings.TrimPrefix(chainId, "0x")
	if len(trimmed) > ChainIdLength*2 {
		return nil, NewErrLenght(ChainIdLength, len(trimmed))
	}
	if len(trimmed) == 64 {
		return NewChainIdFromHex(EcosystemEVM.ToEcosystemHexByte() + trimmed[2:])
	}
	return NewChainIdFromHex(
		EcosystemEVM.ToEcosystemHexByte() +
			repeated64Zeros[len(trimmed)+2:] +
			trimmed,
	)
}

// NewEVMEthereumChainId returns the ChainId for the Ethereum blockchain (0x1)
func NewEVMEthereumChainId() ChainId {
	return ChainId{
		inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
	}
}

// NewEVMHoleskyChainId returns the ChainId for the Ethereum Holesky blockchain (0x4268)
func NewEVMHoleskyChainId() ChainId {
	return ChainId{
		inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x42, 0x68},
	}
}

// NewEVMSepoliaChainId returns the ChainId for the Ethereum Sepolia blockchain (0xaa36a7)
func NewEVMSepoliaChainId() ChainId {
	return ChainId{
		inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xaa, 0x36, 0xa7},
	}
}

// NewEVMBinanceSmartChainChainId returns the ChainId for the Binance Smart Chain blockchain (0x38)
func NewEVMBinanceSmartChainChainId() ChainId {
	return ChainId{
		inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38},
	}
}

// NewEVMBaseChainId returns the ChainId for the Base blockchain (0x2105)
func NewEVMBaseChainId() ChainId {
	return ChainId{
		inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x21, 0x05},
	}
}

// NewEVMBaseSepoliaChainId returns the ChainId for the Base Sepolia blockchain (0x14a34)
func NewEVMBaseSepoliaChainId() ChainId {
	return ChainId{
		inner: []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x4a, 0x34},
	}
}
